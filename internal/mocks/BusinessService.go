// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BusinessService is an autogenerated mock type for the BusinessService type
type BusinessService struct {
	mock.Mock
}

// CountBusinesses provides a mock function with given fields: ctx
func (_m *BusinessService) CountBusinesses(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountBusinesses")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBusiness provides a mock function with given fields: ctx, input
func (_m *BusinessService) CreateBusiness(ctx context.Context, input *domain.CreateBusinessInput) (*domain.Business, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateBusiness")
	}

	var r0 *domain.Business
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateBusinessInput) (*domain.Business, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateBusinessInput) *domain.Business); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Business)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateBusinessInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBusiness provides a mock function with given fields: ctx, id
func (_m *BusinessService) DeleteBusiness(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBusiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBusiness provides a mock function with given fields: ctx, id
func (_m *BusinessService) GetBusiness(ctx context.Context, id uuid.UUID) (*domain.Business, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBusiness")
	}

	var r0 *domain.Business
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Business, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Business); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Business)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBusinessesByOwner provides a mock function with given fields: ctx, ownerID
func (_m *BusinessService) GetBusinessesByOwner(ctx context.Context, ownerID uuid.UUID) ([]*domain.Business, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBusinessesByOwner")
	}

	var r0 []*domain.Business
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Business, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Business); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Business)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBusinesses provides a mock function with given fields: ctx, page, pageSize
func (_m *BusinessService) ListBusinesses(ctx context.Context, page int, pageSize int) ([]*domain.Business, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListBusinesses")
	}

	var r0 []*domain.Business
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*domain.Business, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.Business); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Business)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBusiness provides a mock function with given fields: ctx, id, input
func (_m *BusinessService) UpdateBusiness(ctx context.Context, id uuid.UUID, input *domain.UpdateBusinessInput) error {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBusiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateBusinessInput) error); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBusinessService creates a new instance of BusinessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusinessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusinessService {
	mock := &BusinessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
