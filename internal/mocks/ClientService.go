// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CountClients provides a mock function with given fields: ctx
func (_m *ClientService) CountClients(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountClients")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountClientsByProvider provides a mock function with given fields: ctx, providerID
func (_m *ClientService) CountClientsByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountClientsByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClient provides a mock function with given fields: ctx, input
func (_m *ClientService) CreateClient(ctx context.Context, input *domain.CreateClientInput) (*domain.Client, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateClientInput) (*domain.Client, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateClientInput) *domain.Client); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateClientInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClient provides a mock function with given fields: ctx, id, deletedBy
func (_m *ClientService) DeleteClient(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: ctx, id
func (_m *ClientService) GetClient(ctx context.Context, id uuid.UUID) (*domain.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Client); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByProviderAndEmail provides a mock function with given fields: ctx, providerID, email
func (_m *ClientService) GetClientByProviderAndEmail(ctx context.Context, providerID uuid.UUID, email string) (*domain.Client, error) {
	ret := _m.Called(ctx, providerID, email)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByProviderAndEmail")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*domain.Client, error)); ok {
		return rf(ctx, providerID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *domain.Client); ok {
		r0 = rf(ctx, providerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, providerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientsByUserID provides a mock function with given fields: ctx, userID
func (_m *ClientService) GetClientsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Client, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientsByUserID")
	}

	var r0 []*domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Client, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Client); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClientsByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *ClientService) ListClientsByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Client, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListClientsByProvider")
	}

	var r0 []*domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Client, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Client); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchClients provides a mock function with given fields: ctx, providerID, query, page, pageSize
func (_m *ClientService) SearchClients(ctx context.Context, providerID uuid.UUID, query string, page int, pageSize int) ([]*domain.Client, error) {
	ret := _m.Called(ctx, providerID, query, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for SearchClients")
	}

	var r0 []*domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) ([]*domain.Client, error)); ok {
		return rf(ctx, providerID, query, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) []*domain.Client); ok {
		r0 = rf(ctx, providerID, query, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int, int) error); ok {
		r1 = rf(ctx, providerID, query, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClient provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *ClientService) UpdateClient(ctx context.Context, id uuid.UUID, input *domain.UpdateClientInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateClientInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
