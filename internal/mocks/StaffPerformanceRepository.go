// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// StaffPerformanceRepository is an autogenerated mock type for the StaffPerformanceRepository type
type StaffPerformanceRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, performance
func (_m *StaffPerformanceRepository) Create(ctx context.Context, performance *domain.StaffPerformance) error {
	ret := _m.Called(ctx, performance)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.StaffPerformance) error); ok {
		r0 = rf(ctx, performance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *StaffPerformanceRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *StaffPerformanceRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.StaffPerformance, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.StaffPerformance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.StaffPerformance, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.StaffPerformance); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StaffPerformance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStaffAndDateRange provides a mock function with given fields: ctx, staffID, startDate, endDate
func (_m *StaffPerformanceRepository) GetByStaffAndDateRange(ctx context.Context, staffID uuid.UUID, startDate time.Time, endDate time.Time) ([]*domain.StaffPerformance, error) {
	ret := _m.Called(ctx, staffID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByStaffAndDateRange")
	}

	var r0 []*domain.StaffPerformance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]*domain.StaffPerformance, error)); ok {
		return rf(ctx, staffID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []*domain.StaffPerformance); ok {
		r0 = rf(ctx, staffID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.StaffPerformance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, staffID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStaffAndPeriod provides a mock function with given fields: ctx, staffID, period, startDate
func (_m *StaffPerformanceRepository) GetByStaffAndPeriod(ctx context.Context, staffID uuid.UUID, period string, startDate time.Time) (*domain.StaffPerformance, error) {
	ret := _m.Called(ctx, staffID, period, startDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByStaffAndPeriod")
	}

	var r0 *domain.StaffPerformance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) (*domain.StaffPerformance, error)); ok {
		return rf(ctx, staffID, period, startDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) *domain.StaffPerformance); ok {
		r0 = rf(ctx, staffID, period, startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StaffPerformance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, time.Time) error); ok {
		r1 = rf(ctx, staffID, period, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByBusiness provides a mock function with given fields: ctx, businessID, period, page, pageSize
func (_m *StaffPerformanceRepository) ListByBusiness(ctx context.Context, businessID uuid.UUID, period string, page int, pageSize int) ([]*domain.StaffPerformance, error) {
	ret := _m.Called(ctx, businessID, period, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListByBusiness")
	}

	var r0 []*domain.StaffPerformance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) ([]*domain.StaffPerformance, error)); ok {
		return rf(ctx, businessID, period, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) []*domain.StaffPerformance); ok {
		r0 = rf(ctx, businessID, period, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.StaffPerformance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int, int) error); ok {
		r1 = rf(ctx, businessID, period, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, performance
func (_m *StaffPerformanceRepository) Update(ctx context.Context, id uuid.UUID, performance *domain.StaffPerformance) error {
	ret := _m.Called(ctx, id, performance)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.StaffPerformance) error); ok {
		r0 = rf(ctx, id, performance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStaffPerformanceRepository creates a new instance of StaffPerformanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStaffPerformanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StaffPerformanceRepository {
	mock := &StaffPerformanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
