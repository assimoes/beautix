// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StaffService is an autogenerated mock type for the StaffService type
type StaffService struct {
	mock.Mock
}

// CountBusinessStaff provides a mock function with given fields: ctx, businessID
func (_m *StaffService) CountBusinessStaff(ctx context.Context, businessID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for CountBusinessStaff")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, businessID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountStaff provides a mock function with given fields: ctx
func (_m *StaffService) CountStaff(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountStaff")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStaff provides a mock function with given fields: ctx, input
func (_m *StaffService) CreateStaff(ctx context.Context, input *domain.CreateStaffInput) (*domain.Staff, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateStaff")
	}

	var r0 *domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateStaffInput) (*domain.Staff, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateStaffInput) *domain.Staff); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateStaffInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStaff provides a mock function with given fields: ctx, id, deletedBy
func (_m *StaffService) DeleteStaff(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStaff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBusinessStaff provides a mock function with given fields: ctx, businessID
func (_m *StaffService) GetBusinessStaff(ctx context.Context, businessID uuid.UUID) ([]*domain.Staff, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for GetBusinessStaff")
	}

	var r0 []*domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Staff, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Staff); ok {
		r0 = rf(ctx, businessID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaff provides a mock function with given fields: ctx, id
func (_m *StaffService) GetStaff(ctx context.Context, id uuid.UUID) (*domain.Staff, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStaff")
	}

	var r0 *domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Staff, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Staff); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaffByUser provides a mock function with given fields: ctx, userID
func (_m *StaffService) GetStaffByUser(ctx context.Context, userID uuid.UUID) ([]*domain.Staff, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetStaffByUser")
	}

	var r0 []*domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Staff, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Staff); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBusinessStaff provides a mock function with given fields: ctx, businessID, page, pageSize
func (_m *StaffService) ListBusinessStaff(ctx context.Context, businessID uuid.UUID, page int, pageSize int) ([]*domain.Staff, error) {
	ret := _m.Called(ctx, businessID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListBusinessStaff")
	}

	var r0 []*domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Staff, error)); ok {
		return rf(ctx, businessID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Staff); ok {
		r0 = rf(ctx, businessID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, businessID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStaff provides a mock function with given fields: ctx, page, pageSize
func (_m *StaffService) ListStaff(ctx context.Context, page int, pageSize int) ([]*domain.Staff, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListStaff")
	}

	var r0 []*domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*domain.Staff, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.Staff); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchStaff provides a mock function with given fields: ctx, businessID, query, page, pageSize
func (_m *StaffService) SearchStaff(ctx context.Context, businessID uuid.UUID, query string, page int, pageSize int) ([]*domain.Staff, error) {
	ret := _m.Called(ctx, businessID, query, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for SearchStaff")
	}

	var r0 []*domain.Staff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) ([]*domain.Staff, error)); ok {
		return rf(ctx, businessID, query, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) []*domain.Staff); ok {
		r0 = rf(ctx, businessID, query, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Staff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int, int) error); ok {
		r1 = rf(ctx, businessID, query, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStaff provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *StaffService) UpdateStaff(ctx context.Context, id uuid.UUID, input *domain.UpdateStaffInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStaff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateStaffInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStaffService creates a new instance of StaffService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStaffService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StaffService {
	mock := &StaffService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
