// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CampaignRepository is an autogenerated mock type for the CampaignRepository type
type CampaignRepository struct {
	mock.Mock
}

// AddServices provides a mock function with given fields: ctx, campaignID, serviceIDs, createdBy
func (_m *CampaignRepository) AddServices(ctx context.Context, campaignID uuid.UUID, serviceIDs []uuid.UUID, createdBy uuid.UUID) error {
	ret := _m.Called(ctx, campaignID, serviceIDs, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for AddServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, campaignID, serviceIDs, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx
func (_m *CampaignRepository) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountActiveByProvider provides a mock function with given fields: ctx, providerID
func (_m *CampaignRepository) CountActiveByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountActiveByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByProvider provides a mock function with given fields: ctx, providerID
func (_m *CampaignRepository) CountByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, campaign
func (_m *CampaignRepository) Create(ctx context.Context, campaign *domain.Campaign) error {
	ret := _m.Called(ctx, campaign)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Campaign) error); ok {
		r0 = rf(ctx, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, deletedBy
func (_m *CampaignRepository) Delete(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CampaignRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.Campaign, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Campaign, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Campaign); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActiveByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *CampaignRepository) ListActiveByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Campaign, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveByProvider")
	}

	var r0 []*domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Campaign, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Campaign); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *CampaignRepository) ListByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Campaign, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListByProvider")
	}

	var r0 []*domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Campaign, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Campaign); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceMappingsByID provides a mock function with given fields: ctx, campaignID
func (_m *CampaignRepository) ListServiceMappingsByID(ctx context.Context, campaignID uuid.UUID) ([]*domain.CampaignServiceMapping, error) {
	ret := _m.Called(ctx, campaignID)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceMappingsByID")
	}

	var r0 []*domain.CampaignServiceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.CampaignServiceMapping, error)); ok {
		return rf(ctx, campaignID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.CampaignServiceMapping); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.CampaignServiceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesByID provides a mock function with given fields: ctx, campaignID
func (_m *CampaignRepository) ListServicesByID(ctx context.Context, campaignID uuid.UUID) ([]*domain.Service, error) {
	ret := _m.Called(ctx, campaignID)

	if len(ret) == 0 {
		panic("no return value specified for ListServicesByID")
	}

	var r0 []*domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Service, error)); ok {
		return rf(ctx, campaignID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Service); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveServices provides a mock function with given fields: ctx, campaignID, serviceIDs
func (_m *CampaignRepository) RemoveServices(ctx context.Context, campaignID uuid.UUID, serviceIDs []uuid.UUID) error {
	ret := _m.Called(ctx, campaignID, serviceIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r0 = rf(ctx, campaignID, serviceIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *CampaignRepository) Update(ctx context.Context, id uuid.UUID, input *domain.UpdateCampaignInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateCampaignInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCampaignRepository creates a new instance of CampaignRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCampaignRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CampaignRepository {
	mock := &CampaignRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
