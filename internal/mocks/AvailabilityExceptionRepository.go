// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// AvailabilityExceptionRepository is an autogenerated mock type for the AvailabilityExceptionRepository type
type AvailabilityExceptionRepository struct {
	mock.Mock
}

// CountByBusiness provides a mock function with given fields: ctx, businessID
func (_m *AvailabilityExceptionRepository) CountByBusiness(ctx context.Context, businessID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for CountByBusiness")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, businessID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, exception
func (_m *AvailabilityExceptionRepository) Create(ctx context.Context, exception *domain.AvailabilityException) error {
	ret := _m.Called(ctx, exception)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AvailabilityException) error); ok {
		r0 = rf(ctx, exception)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, deletedBy
func (_m *AvailabilityExceptionRepository) Delete(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *AvailabilityExceptionRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.AvailabilityException, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.AvailabilityException
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.AvailabilityException, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.AvailabilityException); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AvailabilityException)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStaff provides a mock function with given fields: ctx, staffID
func (_m *AvailabilityExceptionRepository) GetByStaff(ctx context.Context, staffID uuid.UUID) ([]*domain.AvailabilityException, error) {
	ret := _m.Called(ctx, staffID)

	if len(ret) == 0 {
		panic("no return value specified for GetByStaff")
	}

	var r0 []*domain.AvailabilityException
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.AvailabilityException, error)); ok {
		return rf(ctx, staffID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.AvailabilityException); ok {
		r0 = rf(ctx, staffID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AvailabilityException)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, staffID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStaffAndDateRange provides a mock function with given fields: ctx, staffID, start, end
func (_m *AvailabilityExceptionRepository) GetByStaffAndDateRange(ctx context.Context, staffID uuid.UUID, start time.Time, end time.Time) ([]*domain.AvailabilityException, error) {
	ret := _m.Called(ctx, staffID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetByStaffAndDateRange")
	}

	var r0 []*domain.AvailabilityException
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]*domain.AvailabilityException, error)); ok {
		return rf(ctx, staffID, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []*domain.AvailabilityException); ok {
		r0 = rf(ctx, staffID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AvailabilityException)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, staffID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByBusiness provides a mock function with given fields: ctx, businessID, page, pageSize
func (_m *AvailabilityExceptionRepository) ListByBusiness(ctx context.Context, businessID uuid.UUID, page int, pageSize int) ([]*domain.AvailabilityException, error) {
	ret := _m.Called(ctx, businessID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListByBusiness")
	}

	var r0 []*domain.AvailabilityException
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.AvailabilityException, error)); ok {
		return rf(ctx, businessID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.AvailabilityException); ok {
		r0 = rf(ctx, businessID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AvailabilityException)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, businessID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByBusinessAndDateRange provides a mock function with given fields: ctx, businessID, start, end, page, pageSize
func (_m *AvailabilityExceptionRepository) ListByBusinessAndDateRange(ctx context.Context, businessID uuid.UUID, start time.Time, end time.Time, page int, pageSize int) ([]*domain.AvailabilityException, error) {
	ret := _m.Called(ctx, businessID, start, end, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListByBusinessAndDateRange")
	}

	var r0 []*domain.AvailabilityException
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) ([]*domain.AvailabilityException, error)); ok {
		return rf(ctx, businessID, start, end, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) []*domain.AvailabilityException); ok {
		r0 = rf(ctx, businessID, start, end, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AvailabilityException)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, businessID, start, end, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *AvailabilityExceptionRepository) Update(ctx context.Context, id uuid.UUID, input *domain.UpdateAvailabilityExceptionInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateAvailabilityExceptionInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAvailabilityExceptionRepository creates a new instance of AvailabilityExceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAvailabilityExceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AvailabilityExceptionRepository {
	mock := &AvailabilityExceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
