// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ServiceCategoryService is an autogenerated mock type for the ServiceCategoryService type
type ServiceCategoryService struct {
	mock.Mock
}

// CountCategories provides a mock function with given fields: ctx
func (_m *ServiceCategoryService) CountCategories(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountCategories")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: ctx, name, description
func (_m *ServiceCategoryService) CreateCategory(ctx context.Context, name string, description string) (*domain.ServiceCategory, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *domain.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.ServiceCategory, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ServiceCategory); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: ctx, id, deletedBy
func (_m *ServiceCategoryService) DeleteCategory(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategory provides a mock function with given fields: ctx, id
func (_m *ServiceCategoryService) GetCategory(ctx context.Context, id uuid.UUID) (*domain.ServiceCategory, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *domain.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ServiceCategory, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ServiceCategory); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCategories provides a mock function with given fields: ctx, page, pageSize
func (_m *ServiceCategoryService) ListCategories(ctx context.Context, page int, pageSize int) ([]*domain.ServiceCategory, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []*domain.ServiceCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*domain.ServiceCategory, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.ServiceCategory); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, id, name, description, updatedBy
func (_m *ServiceCategoryService) UpdateCategory(ctx context.Context, id uuid.UUID, name string, description string, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, name, description, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, uuid.UUID) error); ok {
		r0 = rf(ctx, id, name, description, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceCategoryService creates a new instance of ServiceCategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceCategoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceCategoryService {
	mock := &ServiceCategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
