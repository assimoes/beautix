// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CampaignService is an autogenerated mock type for the CampaignService type
type CampaignService struct {
	mock.Mock
}

// AddServicesToCompaign provides a mock function with given fields: ctx, campaignID, serviceIDs, updatedBy
func (_m *CampaignService) AddServicesToCompaign(ctx context.Context, campaignID uuid.UUID, serviceIDs []uuid.UUID, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, campaignID, serviceIDs, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for AddServicesToCompaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, campaignID, serviceIDs, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountActiveCampaignsByProvider provides a mock function with given fields: ctx, providerID
func (_m *CampaignService) CountActiveCampaignsByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountActiveCampaignsByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountCampaigns provides a mock function with given fields: ctx
func (_m *CampaignService) CountCampaigns(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountCampaigns")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountCampaignsByProvider provides a mock function with given fields: ctx, providerID
func (_m *CampaignService) CountCampaignsByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountCampaignsByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCampaign provides a mock function with given fields: ctx, input
func (_m *CampaignService) CreateCampaign(ctx context.Context, input *domain.CreateCampaignInput) (*domain.Campaign, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 *domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateCampaignInput) (*domain.Campaign, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateCampaignInput) *domain.Campaign); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateCampaignInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaign provides a mock function with given fields: ctx, id, deletedBy
func (_m *CampaignService) DeleteCampaign(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCampaign provides a mock function with given fields: ctx, id
func (_m *CampaignService) GetCampaign(ctx context.Context, id uuid.UUID) (*domain.Campaign, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaign")
	}

	var r0 *domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Campaign, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Campaign); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActiveCampaignsByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *CampaignService) ListActiveCampaignsByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Campaign, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveCampaignsByProvider")
	}

	var r0 []*domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Campaign, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Campaign); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCampaignServices provides a mock function with given fields: ctx, campaignID
func (_m *CampaignService) ListCampaignServices(ctx context.Context, campaignID uuid.UUID) ([]*domain.Service, error) {
	ret := _m.Called(ctx, campaignID)

	if len(ret) == 0 {
		panic("no return value specified for ListCampaignServices")
	}

	var r0 []*domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Service, error)); ok {
		return rf(ctx, campaignID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Service); ok {
		r0 = rf(ctx, campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCampaignsByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *CampaignService) ListCampaignsByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Campaign, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListCampaignsByProvider")
	}

	var r0 []*domain.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Campaign, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Campaign); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveServicesFromCampaign provides a mock function with given fields: ctx, campaignID, serviceIDs
func (_m *CampaignService) RemoveServicesFromCampaign(ctx context.Context, campaignID uuid.UUID, serviceIDs []uuid.UUID) error {
	ret := _m.Called(ctx, campaignID, serviceIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServicesFromCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r0 = rf(ctx, campaignID, serviceIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCampaign provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *CampaignService) UpdateCampaign(ctx context.Context, id uuid.UUID, input *domain.UpdateCampaignInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateCampaignInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCampaignService creates a new instance of CampaignService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCampaignService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CampaignService {
	mock := &CampaignService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
