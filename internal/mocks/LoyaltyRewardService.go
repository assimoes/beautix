// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LoyaltyRewardService is an autogenerated mock type for the LoyaltyRewardService type
type LoyaltyRewardService struct {
	mock.Mock
}

// CountLoyaltyRewards provides a mock function with given fields: ctx
func (_m *LoyaltyRewardService) CountLoyaltyRewards(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountLoyaltyRewards")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountLoyaltyRewardsByProgram provides a mock function with given fields: ctx, programID
func (_m *LoyaltyRewardService) CountLoyaltyRewardsByProgram(ctx context.Context, programID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, programID)

	if len(ret) == 0 {
		panic("no return value specified for CountLoyaltyRewardsByProgram")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, programID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoyaltyReward provides a mock function with given fields: ctx, input
func (_m *LoyaltyRewardService) CreateLoyaltyReward(ctx context.Context, input *domain.CreateLoyaltyRewardInput) (*domain.LoyaltyReward, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoyaltyReward")
	}

	var r0 *domain.LoyaltyReward
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateLoyaltyRewardInput) (*domain.LoyaltyReward, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateLoyaltyRewardInput) *domain.LoyaltyReward); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoyaltyReward)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateLoyaltyRewardInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoyaltyReward provides a mock function with given fields: ctx, id, deletedBy
func (_m *LoyaltyRewardService) DeleteLoyaltyReward(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoyaltyReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoyaltyReward provides a mock function with given fields: ctx, id
func (_m *LoyaltyRewardService) GetLoyaltyReward(ctx context.Context, id uuid.UUID) (*domain.LoyaltyReward, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLoyaltyReward")
	}

	var r0 *domain.LoyaltyReward
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.LoyaltyReward, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.LoyaltyReward); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoyaltyReward)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoyaltyRewardsByProgram provides a mock function with given fields: ctx, programID
func (_m *LoyaltyRewardService) ListLoyaltyRewardsByProgram(ctx context.Context, programID uuid.UUID) ([]*domain.LoyaltyReward, error) {
	ret := _m.Called(ctx, programID)

	if len(ret) == 0 {
		panic("no return value specified for ListLoyaltyRewardsByProgram")
	}

	var r0 []*domain.LoyaltyReward
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.LoyaltyReward, error)); ok {
		return rf(ctx, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.LoyaltyReward); ok {
		r0 = rf(ctx, programID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.LoyaltyReward)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoyaltyReward provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *LoyaltyRewardService) UpdateLoyaltyReward(ctx context.Context, id uuid.UUID, input *domain.UpdateLoyaltyRewardInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoyaltyReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateLoyaltyRewardInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoyaltyRewardService creates a new instance of LoyaltyRewardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoyaltyRewardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoyaltyRewardService {
	mock := &LoyaltyRewardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
