// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BusinessSettingsRepository is an autogenerated mock type for the BusinessSettingsRepository type
type BusinessSettingsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, settings
func (_m *BusinessSettingsRepository) Create(ctx context.Context, settings *domain.BusinessSettings) error {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BusinessSettings) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, businessID
func (_m *BusinessSettingsRepository) Delete(ctx context.Context, businessID uuid.UUID) error {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, businessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByBusinessID provides a mock function with given fields: ctx, businessID
func (_m *BusinessSettingsRepository) GetByBusinessID(ctx context.Context, businessID uuid.UUID) (*domain.BusinessSettings, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for GetByBusinessID")
	}

	var r0 *domain.BusinessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.BusinessSettings, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.BusinessSettings); ok {
		r0 = rf(ctx, businessID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BusinessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, businessID, input
func (_m *BusinessSettingsRepository) Update(ctx context.Context, businessID uuid.UUID, input *domain.UpdateBusinessSettingsInput) error {
	ret := _m.Called(ctx, businessID, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateBusinessSettingsInput) error); ok {
		r0 = rf(ctx, businessID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBusinessSettingsRepository creates a new instance of BusinessSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusinessSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusinessSettingsRepository {
	mock := &BusinessSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
