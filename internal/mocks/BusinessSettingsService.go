// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BusinessSettingsService is an autogenerated mock type for the BusinessSettingsService type
type BusinessSettingsService struct {
	mock.Mock
}

// CreateBusinessSettings provides a mock function with given fields: ctx, input
func (_m *BusinessSettingsService) CreateBusinessSettings(ctx context.Context, input *domain.CreateBusinessSettingsInput) (*domain.BusinessSettings, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateBusinessSettings")
	}

	var r0 *domain.BusinessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateBusinessSettingsInput) (*domain.BusinessSettings, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateBusinessSettingsInput) *domain.BusinessSettings); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BusinessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateBusinessSettingsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBusinessSettings provides a mock function with given fields: ctx, businessID
func (_m *BusinessSettingsService) DeleteBusinessSettings(ctx context.Context, businessID uuid.UUID) error {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBusinessSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, businessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBusinessSettings provides a mock function with given fields: ctx, businessID
func (_m *BusinessSettingsService) GetBusinessSettings(ctx context.Context, businessID uuid.UUID) (*domain.BusinessSettings, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for GetBusinessSettings")
	}

	var r0 *domain.BusinessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.BusinessSettings, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.BusinessSettings); ok {
		r0 = rf(ctx, businessID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BusinessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBusinessSettings provides a mock function with given fields: ctx, businessID, input
func (_m *BusinessSettingsService) UpdateBusinessSettings(ctx context.Context, businessID uuid.UUID, input *domain.UpdateBusinessSettingsInput) error {
	ret := _m.Called(ctx, businessID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBusinessSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateBusinessSettingsInput) error); ok {
		r0 = rf(ctx, businessID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBusinessSettingsService creates a new instance of BusinessSettingsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusinessSettingsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusinessSettingsService {
	mock := &BusinessSettingsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
