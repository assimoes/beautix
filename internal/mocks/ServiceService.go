// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ServiceService is an autogenerated mock type for the ServiceService type
type ServiceService struct {
	mock.Mock
}

// CountServices provides a mock function with given fields: ctx
func (_m *ServiceService) CountServices(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountServices")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountServicesByProvider provides a mock function with given fields: ctx, providerID
func (_m *ServiceService) CountServicesByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountServicesByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, input
func (_m *ServiceService) CreateService(ctx context.Context, input *domain.CreateServiceInput) (*domain.Service, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceInput) (*domain.Service, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceInput) *domain.Service); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateServiceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, id, deletedBy
func (_m *ServiceService) DeleteService(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetService provides a mock function with given fields: ctx, id
func (_m *ServiceService) GetService(ctx context.Context, id uuid.UUID) (*domain.Service, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Service, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Service); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesByCategory provides a mock function with given fields: ctx, categoryID, page, pageSize
func (_m *ServiceService) ListServicesByCategory(ctx context.Context, categoryID uuid.UUID, page int, pageSize int) ([]*domain.Service, error) {
	ret := _m.Called(ctx, categoryID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListServicesByCategory")
	}

	var r0 []*domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Service, error)); ok {
		return rf(ctx, categoryID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Service); ok {
		r0 = rf(ctx, categoryID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, categoryID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesByProvider provides a mock function with given fields: ctx, providerID, page, pageSize
func (_m *ServiceService) ListServicesByProvider(ctx context.Context, providerID uuid.UUID, page int, pageSize int) ([]*domain.Service, error) {
	ret := _m.Called(ctx, providerID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListServicesByProvider")
	}

	var r0 []*domain.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.Service, error)); ok {
		return rf(ctx, providerID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.Service); ok {
		r0 = rf(ctx, providerID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, providerID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *ServiceService) UpdateService(ctx context.Context, id uuid.UUID, input *domain.UpdateServiceInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateServiceInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceService creates a new instance of ServiceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceService {
	mock := &ServiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
