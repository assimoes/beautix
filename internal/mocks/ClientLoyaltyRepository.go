// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClientLoyaltyRepository is an autogenerated mock type for the ClientLoyaltyRepository type
type ClientLoyaltyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, clientLoyalty
func (_m *ClientLoyaltyRepository) Create(ctx context.Context, clientLoyalty *domain.ClientLoyalty) error {
	ret := _m.Called(ctx, clientLoyalty)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ClientLoyalty) error); ok {
		r0 = rf(ctx, clientLoyalty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, clientID, programID, deletedBy
func (_m *ClientLoyaltyRepository) Delete(ctx context.Context, clientID uuid.UUID, programID uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, clientID, programID, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, clientID, programID, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByClientAndProgram provides a mock function with given fields: ctx, clientID, programID
func (_m *ClientLoyaltyRepository) GetByClientAndProgram(ctx context.Context, clientID uuid.UUID, programID uuid.UUID) (*domain.ClientLoyalty, error) {
	ret := _m.Called(ctx, clientID, programID)

	if len(ret) == 0 {
		panic("no return value specified for GetByClientAndProgram")
	}

	var r0 *domain.ClientLoyalty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*domain.ClientLoyalty, error)); ok {
		return rf(ctx, clientID, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *domain.ClientLoyalty); ok {
		r0 = rf(ctx, clientID, programID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ClientLoyalty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, clientID, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByClient provides a mock function with given fields: ctx, clientID
func (_m *ClientLoyaltyRepository) ListByClient(ctx context.Context, clientID uuid.UUID) ([]*domain.ClientLoyalty, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for ListByClient")
	}

	var r0 []*domain.ClientLoyalty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.ClientLoyalty, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.ClientLoyalty); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ClientLoyalty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByProgram provides a mock function with given fields: ctx, programID, page, pageSize
func (_m *ClientLoyaltyRepository) ListByProgram(ctx context.Context, programID uuid.UUID, page int, pageSize int) ([]*domain.ClientLoyalty, error) {
	ret := _m.Called(ctx, programID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListByProgram")
	}

	var r0 []*domain.ClientLoyalty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.ClientLoyalty, error)); ok {
		return rf(ctx, programID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.ClientLoyalty); ok {
		r0 = rf(ctx, programID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ClientLoyalty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, programID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePoints provides a mock function with given fields: ctx, clientID, programID, points, updatedBy
func (_m *ClientLoyaltyRepository) UpdatePoints(ctx context.Context, clientID uuid.UUID, programID uuid.UUID, points int, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, clientID, programID, points, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, int, uuid.UUID) error); ok {
		r0 = rf(ctx, clientID, programID, points, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientLoyaltyRepository creates a new instance of ClientLoyaltyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientLoyaltyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientLoyaltyRepository {
	mock := &ClientLoyaltyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
