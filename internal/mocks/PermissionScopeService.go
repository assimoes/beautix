// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PermissionScopeService is an autogenerated mock type for the PermissionScopeService type
type PermissionScopeService struct {
	mock.Mock
}

// CreatePermissionScope provides a mock function with given fields: ctx, userID, businessID, resource, action
func (_m *PermissionScopeService) CreatePermissionScope(ctx context.Context, userID uuid.UUID, businessID uuid.UUID, resource string, action string) (*domain.PermissionScope, error) {
	ret := _m.Called(ctx, userID, businessID, resource, action)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionScope")
	}

	var r0 *domain.PermissionScope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) (*domain.PermissionScope, error)); ok {
		return rf(ctx, userID, businessID, resource, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) *domain.PermissionScope); ok {
		r0 = rf(ctx, userID, businessID, resource, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PermissionScope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, businessID, resource, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissions provides a mock function with given fields: ctx, userID, businessID
func (_m *PermissionScopeService) GetUserPermissions(ctx context.Context, userID uuid.UUID, businessID uuid.UUID) ([]*domain.PermissionScope, error) {
	ret := _m.Called(ctx, userID, businessID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 []*domain.PermissionScope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) ([]*domain.PermissionScope, error)); ok {
		return rf(ctx, userID, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) []*domain.PermissionScope); ok {
		r0 = rf(ctx, userID, businessID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PermissionScope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermission provides a mock function with given fields: ctx, userID, businessID, resource, action
func (_m *PermissionScopeService) HasPermission(ctx context.Context, userID uuid.UUID, businessID uuid.UUID, resource string, action string) (bool, error) {
	ret := _m.Called(ctx, userID, businessID, resource, action)

	if len(ret) == 0 {
		panic("no return value specified for HasPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) (bool, error)); ok {
		return rf(ctx, userID, businessID, resource, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) bool); ok {
		r0 = rf(ctx, userID, businessID, resource, action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, businessID, resource, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAllPermissions provides a mock function with given fields: ctx, userID, businessID
func (_m *PermissionScopeService) RevokeAllPermissions(ctx context.Context, userID uuid.UUID, businessID uuid.UUID) error {
	ret := _m.Called(ctx, userID, businessID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, businessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokePermission provides a mock function with given fields: ctx, userID, businessID, resource, action
func (_m *PermissionScopeService) RevokePermission(ctx context.Context, userID uuid.UUID, businessID uuid.UUID, resource string, action string) error {
	ret := _m.Called(ctx, userID, businessID, resource, action)

	if len(ret) == 0 {
		panic("no return value specified for RevokePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, userID, businessID, resource, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPermissionScopeService creates a new instance of PermissionScopeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionScopeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionScopeService {
	mock := &PermissionScopeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
