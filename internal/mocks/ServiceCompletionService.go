// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ServiceCompletionService is an autogenerated mock type for the ServiceCompletionService type
type ServiceCompletionService struct {
	mock.Mock
}

// CountServiceCompletions provides a mock function with given fields: ctx
func (_m *ServiceCompletionService) CountServiceCompletions(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountServiceCompletions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountServiceCompletionsByProvider provides a mock function with given fields: ctx, providerID
func (_m *ServiceCompletionService) CountServiceCompletionsByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountServiceCompletionsByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceCompletion provides a mock function with given fields: ctx, input
func (_m *ServiceCompletionService) CreateServiceCompletion(ctx context.Context, input *domain.CreateServiceCompletionInput) (*domain.ServiceCompletion, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceCompletion")
	}

	var r0 *domain.ServiceCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceCompletionInput) (*domain.ServiceCompletion, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceCompletionInput) *domain.ServiceCompletion); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateServiceCompletionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceCompletion provides a mock function with given fields: ctx, id, deletedBy
func (_m *ServiceCompletionService) DeleteServiceCompletion(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProviderRevenue provides a mock function with given fields: ctx, providerID, startDate, endDate
func (_m *ServiceCompletionService) GetProviderRevenue(ctx context.Context, providerID uuid.UUID, startDate time.Time, endDate time.Time) (float64, error) {
	ret := _m.Called(ctx, providerID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderRevenue")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) (float64, error)); ok {
		return rf(ctx, providerID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) float64); ok {
		r0 = rf(ctx, providerID, startDate, endDate)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, providerID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceCompletion provides a mock function with given fields: ctx, id
func (_m *ServiceCompletionService) GetServiceCompletion(ctx context.Context, id uuid.UUID) (*domain.ServiceCompletion, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceCompletion")
	}

	var r0 *domain.ServiceCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ServiceCompletion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ServiceCompletion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceCompletionByAppointmentID provides a mock function with given fields: ctx, appointmentID
func (_m *ServiceCompletionService) GetServiceCompletionByAppointmentID(ctx context.Context, appointmentID uuid.UUID) (*domain.ServiceCompletion, error) {
	ret := _m.Called(ctx, appointmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceCompletionByAppointmentID")
	}

	var r0 *domain.ServiceCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ServiceCompletion, error)); ok {
		return rf(ctx, appointmentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ServiceCompletion); ok {
		r0 = rf(ctx, appointmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, appointmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceCompletionsByProvider provides a mock function with given fields: ctx, providerID, startDate, endDate, page, pageSize
func (_m *ServiceCompletionService) ListServiceCompletionsByProvider(ctx context.Context, providerID uuid.UUID, startDate time.Time, endDate time.Time, page int, pageSize int) ([]*domain.ServiceCompletion, error) {
	ret := _m.Called(ctx, providerID, startDate, endDate, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceCompletionsByProvider")
	}

	var r0 []*domain.ServiceCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) ([]*domain.ServiceCompletion, error)); ok {
		return rf(ctx, providerID, startDate, endDate, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) []*domain.ServiceCompletion); ok {
		r0 = rf(ctx, providerID, startDate, endDate, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, providerID, startDate, endDate, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceCompletion provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *ServiceCompletionService) UpdateServiceCompletion(ctx context.Context, id uuid.UUID, input *domain.UpdateServiceCompletionInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateServiceCompletionInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceCompletionService creates a new instance of ServiceCompletionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceCompletionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceCompletionService {
	mock := &ServiceCompletionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
