// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LoyaltyRewardRepository is an autogenerated mock type for the LoyaltyRewardRepository type
type LoyaltyRewardRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *LoyaltyRewardRepository) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByProgram provides a mock function with given fields: ctx, programID
func (_m *LoyaltyRewardRepository) CountByProgram(ctx context.Context, programID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, programID)

	if len(ret) == 0 {
		panic("no return value specified for CountByProgram")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, programID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, reward
func (_m *LoyaltyRewardRepository) Create(ctx context.Context, reward *domain.LoyaltyReward) error {
	ret := _m.Called(ctx, reward)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LoyaltyReward) error); ok {
		r0 = rf(ctx, reward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, deletedBy
func (_m *LoyaltyRewardRepository) Delete(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *LoyaltyRewardRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.LoyaltyReward, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.LoyaltyReward
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.LoyaltyReward, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.LoyaltyReward); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoyaltyReward)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByProgram provides a mock function with given fields: ctx, programID
func (_m *LoyaltyRewardRepository) ListByProgram(ctx context.Context, programID uuid.UUID) ([]*domain.LoyaltyReward, error) {
	ret := _m.Called(ctx, programID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProgram")
	}

	var r0 []*domain.LoyaltyReward
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.LoyaltyReward, error)); ok {
		return rf(ctx, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.LoyaltyReward); ok {
		r0 = rf(ctx, programID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.LoyaltyReward)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *LoyaltyRewardRepository) Update(ctx context.Context, id uuid.UUID, input *domain.UpdateLoyaltyRewardInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateLoyaltyRewardInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoyaltyRewardRepository creates a new instance of LoyaltyRewardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoyaltyRewardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoyaltyRewardRepository {
	mock := &LoyaltyRewardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
