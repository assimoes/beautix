// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// AppointmentService is an autogenerated mock type for the AppointmentService type
type AppointmentService struct {
	mock.Mock
}

// CheckAvailability provides a mock function with given fields: ctx, providerID, startTime, endTime
func (_m *AppointmentService) CheckAvailability(ctx context.Context, providerID uuid.UUID, startTime time.Time, endTime time.Time) (bool, error) {
	ret := _m.Called(ctx, providerID, startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailability")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) (bool, error)); ok {
		return rf(ctx, providerID, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) bool); ok {
		r0 = rf(ctx, providerID, startTime, endTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, providerID, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAppointments provides a mock function with given fields: ctx
func (_m *AppointmentService) CountAppointments(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountAppointments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAppointmentsByProvider provides a mock function with given fields: ctx, providerID
func (_m *AppointmentService) CountAppointmentsByProvider(ctx context.Context, providerID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for CountAppointmentsByProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, providerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAppointmentsByProviderAndDateRange provides a mock function with given fields: ctx, providerID, startDate, endDate
func (_m *AppointmentService) CountAppointmentsByProviderAndDateRange(ctx context.Context, providerID uuid.UUID, startDate time.Time, endDate time.Time) (int64, error) {
	ret := _m.Called(ctx, providerID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for CountAppointmentsByProviderAndDateRange")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) (int64, error)); ok {
		return rf(ctx, providerID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) int64); ok {
		r0 = rf(ctx, providerID, startDate, endDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, providerID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppointment provides a mock function with given fields: ctx, input
func (_m *AppointmentService) CreateAppointment(ctx context.Context, input *domain.CreateAppointmentInput) (*domain.Appointment, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppointment")
	}

	var r0 *domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateAppointmentInput) (*domain.Appointment, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateAppointmentInput) *domain.Appointment); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateAppointmentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppointment provides a mock function with given fields: ctx, id, deletedBy
func (_m *AppointmentService) DeleteAppointment(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppointment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAppointment provides a mock function with given fields: ctx, id
func (_m *AppointmentService) GetAppointment(ctx context.Context, id uuid.UUID) (*domain.Appointment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAppointment")
	}

	var r0 *domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Appointment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Appointment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppointmentsByClient provides a mock function with given fields: ctx, clientID, startDate, endDate, page, pageSize
func (_m *AppointmentService) ListAppointmentsByClient(ctx context.Context, clientID uuid.UUID, startDate time.Time, endDate time.Time, page int, pageSize int) ([]*domain.Appointment, error) {
	ret := _m.Called(ctx, clientID, startDate, endDate, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListAppointmentsByClient")
	}

	var r0 []*domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) ([]*domain.Appointment, error)); ok {
		return rf(ctx, clientID, startDate, endDate, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) []*domain.Appointment); ok {
		r0 = rf(ctx, clientID, startDate, endDate, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, clientID, startDate, endDate, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppointmentsByProvider provides a mock function with given fields: ctx, providerID, startDate, endDate, page, pageSize
func (_m *AppointmentService) ListAppointmentsByProvider(ctx context.Context, providerID uuid.UUID, startDate time.Time, endDate time.Time, page int, pageSize int) ([]*domain.Appointment, error) {
	ret := _m.Called(ctx, providerID, startDate, endDate, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListAppointmentsByProvider")
	}

	var r0 []*domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) ([]*domain.Appointment, error)); ok {
		return rf(ctx, providerID, startDate, endDate, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) []*domain.Appointment); ok {
		r0 = rf(ctx, providerID, startDate, endDate, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, providerID, startDate, endDate, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppointment provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *AppointmentService) UpdateAppointment(ctx context.Context, id uuid.UUID, input *domain.UpdateAppointmentInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppointment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateAppointmentInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAppointmentService creates a new instance of AppointmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppointmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppointmentService {
	mock := &AppointmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
