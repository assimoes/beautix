// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/assimoes/beautix/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ServiceAssignmentService is an autogenerated mock type for the ServiceAssignmentService type
type ServiceAssignmentService struct {
	mock.Mock
}

// CountBusinessServiceAssignments provides a mock function with given fields: ctx, businessID
func (_m *ServiceAssignmentService) CountBusinessServiceAssignments(ctx context.Context, businessID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for CountBusinessServiceAssignments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, businessID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAssignment provides a mock function with given fields: ctx, input
func (_m *ServiceAssignmentService) CreateServiceAssignment(ctx context.Context, input *domain.CreateServiceAssignmentInput) (*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAssignment")
	}

	var r0 *domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceAssignmentInput) (*domain.ServiceAssignment, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateServiceAssignmentInput) *domain.ServiceAssignment); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateServiceAssignmentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceAssignment provides a mock function with given fields: ctx, id, deletedBy
func (_m *ServiceAssignmentService) DeleteServiceAssignment(ctx context.Context, id uuid.UUID, deletedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, deletedBy)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetServiceAssignment provides a mock function with given fields: ctx, id
func (_m *ServiceAssignmentService) GetServiceAssignment(ctx context.Context, id uuid.UUID) (*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAssignment")
	}

	var r0 *domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ServiceAssignment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ServiceAssignment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAssignmentByStaffAndService provides a mock function with given fields: ctx, staffID, serviceID
func (_m *ServiceAssignmentService) GetServiceAssignmentByStaffAndService(ctx context.Context, staffID uuid.UUID, serviceID uuid.UUID) (*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, staffID, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAssignmentByStaffAndService")
	}

	var r0 *domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*domain.ServiceAssignment, error)); ok {
		return rf(ctx, staffID, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *domain.ServiceAssignment); ok {
		r0 = rf(ctx, staffID, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, staffID, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceStaffAssignments provides a mock function with given fields: ctx, serviceID
func (_m *ServiceAssignmentService) GetServiceStaffAssignments(ctx context.Context, serviceID uuid.UUID) ([]*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceStaffAssignments")
	}

	var r0 []*domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.ServiceAssignment, error)); ok {
		return rf(ctx, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.ServiceAssignment); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaffServiceAssignments provides a mock function with given fields: ctx, staffID
func (_m *ServiceAssignmentService) GetStaffServiceAssignments(ctx context.Context, staffID uuid.UUID) ([]*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, staffID)

	if len(ret) == 0 {
		panic("no return value specified for GetStaffServiceAssignments")
	}

	var r0 []*domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.ServiceAssignment, error)); ok {
		return rf(ctx, staffID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.ServiceAssignment); ok {
		r0 = rf(ctx, staffID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, staffID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBusinessServiceAssignments provides a mock function with given fields: ctx, businessID, page, pageSize
func (_m *ServiceAssignmentService) ListBusinessServiceAssignments(ctx context.Context, businessID uuid.UUID, page int, pageSize int) ([]*domain.ServiceAssignment, error) {
	ret := _m.Called(ctx, businessID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListBusinessServiceAssignments")
	}

	var r0 []*domain.ServiceAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*domain.ServiceAssignment, error)); ok {
		return rf(ctx, businessID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*domain.ServiceAssignment); ok {
		r0 = rf(ctx, businessID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, businessID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceAssignment provides a mock function with given fields: ctx, id, input, updatedBy
func (_m *ServiceAssignmentService) UpdateServiceAssignment(ctx context.Context, id uuid.UUID, input *domain.UpdateServiceAssignmentInput, updatedBy uuid.UUID) error {
	ret := _m.Called(ctx, id, input, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UpdateServiceAssignmentInput, uuid.UUID) error); ok {
		r0 = rf(ctx, id, input, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceAssignmentService creates a new instance of ServiceAssignmentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAssignmentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAssignmentService {
	mock := &ServiceAssignmentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
