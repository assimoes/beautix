package tests

import (
	"context"
	"testing"

	"github.com/assimoes/beautix/internal/domain"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestCreateUser tests creating a user
func TestUserRepositoryIntegration_CreateUser(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	user := &domain.User{
		ClerkID:            "clerk_create_" + uuid.New().String()[:8],
		Email:              "test@example.com",
		PasswordHash:       "hashed_password",
		FirstName:          "John",
		LastName:           "Doe",
		Phone:              "+1234567890",
		Role:               "user",
		IsActive:           true,
		EmailVerified:      false,
		LanguagePreference: "en",
	}

	// Test creation
	err := repos.UserRepo.Create(ctx, user)
	require.NoError(t, err)
	assert.NotEqual(t, uuid.Nil, user.UserID)
	assert.False(t, user.CreatedAt.IsZero())
	assert.False(t, user.UpdatedAt.IsZero())
}

// TestCreateUserDuplicate tests creating a user with duplicate email
func TestUserRepositoryIntegration_CreateUserDuplicate(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create first user
	user1 := &domain.User{
		ClerkID:   "clerk_dup1_" + uuid.New().String()[:8],
		Email:     "duplicate@example.com",
		FirstName: "John",
		LastName:  "Doe",
		Role:      "user",
		IsActive:  true,
	}

	err := repos.UserRepo.Create(ctx, user1)
	require.NoError(t, err)

	// Try to create second user with same email
	user2 := &domain.User{
		ClerkID:   "clerk_dup2_" + uuid.New().String()[:8],
		Email:     "duplicate@example.com",
		FirstName: "Jane",
		LastName:  "Smith",
		Role:      "user",
		IsActive:  true,
	}

	err = repos.UserRepo.Create(ctx, user2)
	assert.Error(t, err, "Should fail due to unique constraint on email")
}

// TestGetUserByID tests retrieving a user by ID
func TestUserRepositoryIntegration_GetUserByID(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create a user first
	originalUser := &domain.User{
		ClerkID:   "clerk_getid_" + uuid.New().String()[:8],
		Email:     "getbyid@example.com",
		FirstName: "Get",
		LastName:  "ByID",
		Phone:     "+1234567890",
		Role:      "user",
		IsActive:  true,
	}

	err := repos.UserRepo.Create(ctx, originalUser)
	require.NoError(t, err)

	// Retrieve the user
	retrievedUser, err := repos.UserRepo.GetByID(ctx, originalUser.UserID)
	require.NoError(t, err)
	require.NotNil(t, retrievedUser)

	// Verify all fields
	assert.Equal(t, originalUser.UserID, retrievedUser.UserID)
	assert.Equal(t, originalUser.Email, retrievedUser.Email)
	assert.Equal(t, originalUser.FirstName, retrievedUser.FirstName)
	assert.Equal(t, originalUser.LastName, retrievedUser.LastName)
	assert.Equal(t, originalUser.Phone, retrievedUser.Phone)
	assert.Equal(t, originalUser.Role, retrievedUser.Role)
	assert.Equal(t, originalUser.IsActive, retrievedUser.IsActive)
}

// TestGetUserByIDNotFound tests retrieving a non-existent user
func TestUserRepositoryIntegration_GetUserByIDNotFound(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	nonExistentID := uuid.New()
	user, err := repos.UserRepo.GetByID(ctx, nonExistentID)

	assert.Error(t, err)
	assert.Nil(t, user)
	assert.Contains(t, err.Error(), "not found")
}

// TestGetUserByEmail tests retrieving a user by email
func TestUserRepositoryIntegration_GetUserByEmail(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create a user first
	originalUser := &domain.User{
		ClerkID:   "clerk_getemail_" + uuid.New().String()[:8],
		Email:     "getbyemail@example.com",
		FirstName: "Get",
		LastName:  "ByEmail",
		Phone:     "+1234567890",
		Role:      "user",
		IsActive:  true,
	}

	err := repos.UserRepo.Create(ctx, originalUser)
	require.NoError(t, err)

	// Retrieve the user by email
	retrievedUser, err := repos.UserRepo.GetByEmail(ctx, originalUser.Email)
	require.NoError(t, err)
	require.NotNil(t, retrievedUser)

	// Verify key fields
	assert.Equal(t, originalUser.UserID, retrievedUser.UserID)
	assert.Equal(t, originalUser.Email, retrievedUser.Email)
	assert.Equal(t, originalUser.FirstName, retrievedUser.FirstName)
	assert.Equal(t, originalUser.LastName, retrievedUser.LastName)
}

// TestGetUserByEmailNotFound tests retrieving a non-existent user by email
func TestUserRepositoryIntegration_GetUserByEmailNotFound(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	user, err := repos.UserRepo.GetByEmail(ctx, "nonexistent@example.com")

	assert.Error(t, err)
	assert.Nil(t, user)
	assert.Contains(t, err.Error(), "not found")
}

// TestUpdateUser tests updating a user
func TestUserRepositoryIntegration_UpdateUser(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create a user first
	user := &domain.User{
		ClerkID:   "clerk_update_" + uuid.New().String()[:8],
		Email:     "update@example.com",
		FirstName: "Original",
		LastName:  "Name",
		Phone:     "+1234567890",
		Role:      "user",
		IsActive:  true,
	}

	err := repos.UserRepo.Create(ctx, user)
	require.NoError(t, err)

	// Update the user
	updateInput := &domain.UpdateUserInput{
		FirstName: stringPtr("Updated"),
		LastName:  stringPtr("LastName"),
		Phone:     stringPtr("+9876543210"),
		IsActive:  boolPtr(false),
	}

	err = repos.UserRepo.Update(ctx, user.UserID, updateInput)
	require.NoError(t, err)

	// Retrieve the updated user
	updatedUser, err := repos.UserRepo.GetByID(ctx, user.UserID)
	require.NoError(t, err)

	// Verify updates
	assert.Equal(t, "Updated", updatedUser.FirstName)
	assert.Equal(t, "LastName", updatedUser.LastName)
	assert.Equal(t, "+9876543210", updatedUser.Phone)
	assert.False(t, updatedUser.IsActive)

	// Verify unchanged fields
	assert.Equal(t, user.Email, updatedUser.Email)
	assert.Equal(t, user.Role, updatedUser.Role)
}

// TestUpdateUserNotFound tests updating a non-existent user
func TestUserRepositoryIntegration_UpdateUserNotFound(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	nonExistentID := uuid.New()
	updateInput := &domain.UpdateUserInput{
		FirstName: stringPtr("Updated"),
	}

	err := repos.UserRepo.Update(ctx, nonExistentID, updateInput)
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "not found")
}

// TestDeleteUser tests soft deleting a user
func TestUserRepositoryIntegration_DeleteUser(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create a user first
	user := &domain.User{
		ClerkID:   "clerk_delete_" + uuid.New().String()[:8],
		Email:     "delete@example.com",
		FirstName: "To",
		LastName:  "Delete",
		Role:      "user",
		IsActive:  true,
	}

	err := repos.UserRepo.Create(ctx, user)
	require.NoError(t, err)

	// Delete the user
	err = repos.UserRepo.Delete(ctx, user.UserID)
	require.NoError(t, err)

	// Try to retrieve the deleted user - should not be found due to soft delete
	deletedUser, err := repos.UserRepo.GetByID(ctx, user.UserID)
	assert.Error(t, err)
	assert.Nil(t, deletedUser)
	assert.Contains(t, err.Error(), "not found")
}

// TestDeleteUserNotFound tests deleting a non-existent user
func TestUserRepositoryIntegration_DeleteUserNotFound(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	nonExistentID := uuid.New()
	err := repos.UserRepo.Delete(ctx, nonExistentID)
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "not found")
}

// TestListUsers tests listing users with pagination
func TestUserRepositoryIntegration_ListUsers(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Create multiple users
	users := []*domain.User{
		{
			ClerkID:   "clerk_list1_" + uuid.New().String()[:8],
			Email:     "list1@example.com",
			FirstName: "User",
			LastName:  "One",
			Role:      "user",
			IsActive:  true,
		},
		{
			ClerkID:   "clerk_list2_" + uuid.New().String()[:8],
			Email:     "list2@example.com",
			FirstName: "User",
			LastName:  "Two",
			Role:      "admin",
			IsActive:  true,
		},
		{
			ClerkID:   "clerk_list3_" + uuid.New().String()[:8],
			Email:     "list3@example.com",
			FirstName: "User",
			LastName:  "Three",
			Role:      "user",
			IsActive:  false,
		},
	}

	// Create all users
	for _, user := range users {
		err := repos.UserRepo.Create(ctx, user)
		require.NoError(t, err)
	}

	// Test listing with pagination
	listedUsers, err := repos.UserRepo.List(ctx, 1, 2) // First page, 2 items
	require.NoError(t, err)
	assert.Len(t, listedUsers, 2)

	// Users should be ordered by created_at DESC (newest first)
	assert.True(t, listedUsers[0].CreatedAt.After(listedUsers[1].CreatedAt) ||
		listedUsers[0].CreatedAt.Equal(listedUsers[1].CreatedAt))

	// Test second page
	listedUsers, err = repos.UserRepo.List(ctx, 2, 2) // Second page, 2 items
	require.NoError(t, err)
	assert.Len(t, listedUsers, 1) // Only one user left
}

// TestListUsersEmpty tests listing when no users exist
func TestUserRepositoryIntegration_ListUsersEmpty(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	users, err := repos.UserRepo.List(ctx, 1, 10)
	require.NoError(t, err)
	assert.Empty(t, users)
}

// TestCountUsers tests counting users
func TestUserRepositoryIntegration_CountUsers(t *testing.T) {
	// Initialize the simple test suite
	suite := NewSimpleTestSuite(t)
	suite.CleanTables("appointments", "service_completions", "service_assignments", "availability_exceptions", "staff_performance", "clients", "staff", "services", "service_categories", "businesses", "users")

	// Get repositories
	repos := suite.CreateTestRepositories()
	ctx := context.Background()

	// Initially should be 0
	count, err := repos.UserRepo.Count(ctx)
	require.NoError(t, err)
	assert.Equal(t, int64(0), count)

	// Create some users
	users := []*domain.User{
		{
			ClerkID:   "clerk_count1_" + uuid.New().String()[:8],
			Email:     "count1@example.com",
			FirstName: "Count",
			LastName:  "One",
			Role:      "user",
			IsActive:  true,
		},
		{
			ClerkID:   "clerk_count2_" + uuid.New().String()[:8],
			Email:     "count2@example.com",
			FirstName: "Count",
			LastName:  "Two",
			Role:      "user",
			IsActive:  true,
		},
	}

	for _, user := range users {
		err := repos.UserRepo.Create(ctx, user)
		require.NoError(t, err)
	}

	// Count should now be 2
	count, err = repos.UserRepo.Count(ctx)
	require.NoError(t, err)
	assert.Equal(t, int64(2), count)

	// Delete one user
	err = repos.UserRepo.Delete(ctx, users[0].UserID)
	require.NoError(t, err)

	// Count should now be 1 (soft deleted users are not counted)
	count, err = repos.UserRepo.Count(ctx)
	require.NoError(t, err)
	assert.Equal(t, int64(1), count)
}

// Helper functions
func stringPtr(s string) *string {
	return &s
}

func boolPtr(b bool) *bool {
	return &b
}